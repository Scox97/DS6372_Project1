# plot_list[[paste("standard", var_name)]] <- qq_plot_standard
# plot_list[[paste("log", var_name)]] <- qq_plot_log
# plot_list[[paste("yeojohnson", var_name)]] <- qq_plot_yj
}
transformed_data <- calculate_qq_data_log(life[["adult.mortality"]])
ggplot(transformed_data, aes(x = theoretical_quantiles, y = sample_quantiles)) +
geom_point() +
geom_line(color = "red") + # Optional: Add a line to emphasize the trend
facet_wrap(~ Variable, scales = "free") +
labs(x = "Theoretical Quantiles", y = "Sample Quantiles", title = "Log-Transformed Q-Q Plots for Numeric Variables") +
theme_minimal()
ggplot(transformed_data, aes(x = theoretical_quantiles, y = sample_quantiles)) +
geom_point() +
geom_line(color = "red") + # Optional: Add a line to emphasize the trend
labs(x = "Theoretical Quantiles", y = "Sample Quantiles", title = "Log-Transformed Q-Q Plots for Numeric Variables") +
theme_minimal()
transformed_data <- calculate_qq_data_log(life[["adult.mortality"]])
ggplot(transformed_data, aes(x = theoretical_quantiles, y = sample_quantiles)) +
geom_point() +
geom_line(color = "red") + # Optional: Add a line to emphasize the trend
labs(x = "Theoretical Quantiles", y = "Sample Quantiles", title = "Log-Transformed Q-Q Plots for Numeric Variables") +
theme_minimal()
transformed_data <- calculate_qq_data_log(life[["adult.mortality"]])
ggplot(transformed_data, aes(x = TheoreticalQuantiles, y = SampleQuantiles)) +
geom_point() +
geom_line(color = "red") + # Optional: Add a line to emphasize the trend
labs(x = "Theoretical Quantiles", y = "Sample Quantiles", title = "Log-Transformed Q-Q Plots for Numeric Variables") +
theme_minimal()
# Loop through each numeric variable
for (var_name in numeric_vars) {
transformed_data <- calculate_qq_data_log(life[[var_name]])
ggplot(transformed_data, aes(x = TheoreticalQuantiles, y = SampleQuantiles)) +
geom_point() +
geom_line(color = "red") + # Optional: Add a line to emphasize the trend
labs(x = "Theoretical Quantiles", y = "Sample Quantiles", title = "Log-Transformed Q-Q Plots for Numeric Variables") +
theme_minimal()
# # Standard Q-Q plot
# ggplot2::ggplot() +
#   ggplot2::geom_qq(data = data.frame(x = life[[var_name]]), ggplot2::aes(sample = x)) +
#   ggplot2::geom_qq_line(data = data.frame(x = life[[var_name]]), ggplot2::aes(sample = x)) +
#   ggplot2::labs(title = paste("Standard", var_name))
#
# # Yeo-Johnson Q-Q plot
# transformed_data <- calculate_qq_data_log(life[[var_name]])
# ggplot2::ggplot() +
#   ggplot2::geom_qq(data = transformed_data, ggplot2::aes(sample = SampleQuantiles)) +
#   ggplot2::geom_qq_line(data = transformed_data, ggplot2::aes(sample = SampleQuantiles)) +
#   ggplot2::labs(title = paste("Log", var_name))
#
# # Yeo-Johnson Q-Q plot
# transformed_data <- calculate_qq_data_yeo_johnson(life[[var_name]])
# ggplot2::ggplot() +
#   ggplot2::geom_qq(data = transformed_data, ggplot2::aes(sample = SampleQuantiles)) +
#   ggplot2::geom_qq_line(data = transformed_data, ggplot2::aes(sample = SampleQuantiles)) +
#   ggplot2::labs(title = paste("Yeo-Johnson", var_name))
# # Store plots in the list with unique names
# plot_list[[paste("standard", var_name)]] <- qq_plot_standard
# plot_list[[paste("log", var_name)]] <- qq_plot_log
# plot_list[[paste("yeojohnson", var_name)]] <- qq_plot_yj
}
# Loop through each numeric variable
for (var_name in numeric_vars) {
transformed_data <- calculate_qq_data_log(life[[var_name]])
ggplot(transformed_data, aes(x = TheoreticalQuantiles, y = SampleQuantiles)) +
geom_point() +
geom_line(aes(group = Variable), color = "red") + # Optional: Add a line to emphasize the trend
facet_wrap(~ Variable, scales = "free") +
labs(x = "Theoretical Quantiles", y = "Sample Quantiles", title = "Faceted Q-Q Plots for Numeric Variables") +
theme_minimal()
# # Standard Q-Q plot
# ggplot2::ggplot() +
#   ggplot2::geom_qq(data = data.frame(x = life[[var_name]]), ggplot2::aes(sample = x)) +
#   ggplot2::geom_qq_line(data = data.frame(x = life[[var_name]]), ggplot2::aes(sample = x)) +
#   ggplot2::labs(title = paste("Standard", var_name))
#
# # Yeo-Johnson Q-Q plot
# transformed_data <- calculate_qq_data_log(life[[var_name]])
# ggplot2::ggplot() +
#   ggplot2::geom_qq(data = transformed_data, ggplot2::aes(sample = SampleQuantiles)) +
#   ggplot2::geom_qq_line(data = transformed_data, ggplot2::aes(sample = SampleQuantiles)) +
#   ggplot2::labs(title = paste("Log", var_name))
#
# # Yeo-Johnson Q-Q plot
# transformed_data <- calculate_qq_data_yeo_johnson(life[[var_name]])
# ggplot2::ggplot() +
#   ggplot2::geom_qq(data = transformed_data, ggplot2::aes(sample = SampleQuantiles)) +
#   ggplot2::geom_qq_line(data = transformed_data, ggplot2::aes(sample = SampleQuantiles)) +
#   ggplot2::labs(title = paste("Yeo-Johnson", var_name))
# # Store plots in the list with unique names
# plot_list[[paste("standard", var_name)]] <- qq_plot_standard
# plot_list[[paste("log", var_name)]] <- qq_plot_log
# plot_list[[paste("yeojohnson", var_name)]] <- qq_plot_yj
}
# Getting a list of all of the numeric variables minus the response variable
numeric_vars <- names(select(life, where(is.numeric), -life.expectancy))
# Adjusted plotting layout and margins for a grid of 4x4 (adjust as needed based on the number of variables)
par(mfrow=c(3, 3), mar=c(2, 2, 2, 1))
# Initialize an empty list to store plots
plot_list <- list()
# Loop through each numeric variable
for (var_name in numeric_vars) {
transformed_data <- calculate_qq_data_log(life[[var_name]])
ggplot(transformed_data, aes(x = TheoreticalQuantiles, y = SampleQuantiles)) +
geom_point() +
geom_line(aes(group = Variable), color = "red") + # Optional: Add a line to emphasize the trend
facet_wrap(~ Variable, scales = "free") +
labs(x = "Theoretical Quantiles", y = "Sample Quantiles", title = "Faceted Q-Q Plots for Numeric Variables") +
theme_minimal()
# # Standard Q-Q plot
# ggplot2::ggplot() +
#   ggplot2::geom_qq(data = data.frame(x = life[[var_name]]), ggplot2::aes(sample = x)) +
#   ggplot2::geom_qq_line(data = data.frame(x = life[[var_name]]), ggplot2::aes(sample = x)) +
#   ggplot2::labs(title = paste("Standard", var_name))
#
# # Yeo-Johnson Q-Q plot
# transformed_data <- calculate_qq_data_log(life[[var_name]])
# ggplot2::ggplot() +
#   ggplot2::geom_qq(data = transformed_data, ggplot2::aes(sample = SampleQuantiles)) +
#   ggplot2::geom_qq_line(data = transformed_data, ggplot2::aes(sample = SampleQuantiles)) +
#   ggplot2::labs(title = paste("Log", var_name))
#
# # Yeo-Johnson Q-Q plot
# transformed_data <- calculate_qq_data_yeo_johnson(life[[var_name]])
# ggplot2::ggplot() +
#   ggplot2::geom_qq(data = transformed_data, ggplot2::aes(sample = SampleQuantiles)) +
#   ggplot2::geom_qq_line(data = transformed_data, ggplot2::aes(sample = SampleQuantiles)) +
#   ggplot2::labs(title = paste("Yeo-Johnson", var_name))
# # Store plots in the list with unique names
# plot_list[[paste("standard", var_name)]] <- qq_plot_standard
# plot_list[[paste("log", var_name)]] <- qq_plot_log
# plot_list[[paste("yeojohnson", var_name)]] <- qq_plot_yj
}
# Loop through each numeric variable
for (var_name in numeric_vars) {
# Original data Q-Q plot
tryCatch({
qqnorm(life[[var_name]], main = paste("Standard", var_name))
qqline(life[[var_name]], col = "red")
}, error = function(e) {
plot(1, type="n", xlab="", ylab="", main=paste("Standard", var_name, " (Error)"), xlim=c(0, 1), ylim=c(0, 1))
abline(h=0.5, col="gray") # Draw a flat horizontal line
mtext("Error in data", 3)
})
# Log-transformed data Q-Q plot
tryCatch({
log_transformed_data <- log(life[[var_name]] + 1)
qqnorm(log_transformed_data, main = paste("Log(", var_name, ")"))
qqline(log_transformed_data, col = "blue")
}, error = function(e) {
plot(1, type="n", xlab="", ylab="", main=paste("Log", var_name, " (Error)"), xlim=c(0, 1), ylim=c(0, 1))
abline(h=0.5, col="gray") # Draw a flat horizontal line
mtext("Error in data", 3)
})
# Inverse-transformed data Q-Q plot
tryCatch({
qq_data_inv <- calculate_qq_data_inverse(life[[var_name]])
qqnorm(qq_data_inv$SampleQuantiles, main = paste("Inverse(", var_name, ")"))
qqline(qq_data_inv$SampleQuantiles, col = "green")
}, error = function(e) {
plot(1, type="n", xlab="", ylab="", main=paste("Inverse", var_name, " (Error)"), xlim=c(0, 1), ylim=c(0, 1))
abline(h=0.5, col="gray") # Draw a flat horizontal line
mtext("Error in data", 3)
})
# Yeo-Johnson-transformed data Q-Q plot
tryCatch({
qq_data_yj <- calculate_qq_data_yeo_johnson(life[[var_name]])
qqnorm(qq_data_yj$SampleQuantiles, main = paste("Yeo-Johnson (", var_name, ")"))
qqline(qq_data_yj$SampleQuantiles, col = "orange")
}, error = function(e) {
plot(1, type="n", xlab="", ylab="", main=paste("Yeo-Johnson", var_name, " (Error)"), xlim=c(0, 1), ylim=c(0, 1))
abline(h=0.5, col="gray") # Draw a flat horizontal line
mtext("Error in data", 3)
})
}
source("Misc/QQvsLogQQ.r")
View(calculate_qq_data_inverse)
View(calculate_qq_data_inverse)
#Facet Wrap QQplots
library(ggplot2)
library(dplyr)
library(tidyr)
library(purrr)
library(bestNormalize)
# ---- calculate_qq_data ----
calculate_qq_data <- function(variable) {
sample_quantiles <- quantile(variable, probs = seq(0, 1, length.out = 100), na.rm = TRUE)
theoretical_quantiles <- qnorm(seq(0, 1, length.out = 100))
data.frame(SampleQuantiles = sample_quantiles, TheoreticalQuantiles = theoretical_quantiles)
}
# ---- calculate_qq_data_log ----
calculate_qq_data_log <- function(variable) {
# Apply log transformation, handling zeros or negative values by adding a small constant if necessary
variable <- log(variable + 1)  # Adding 1 to handle zeros; adjust as needed based on your data
sample_quantiles <- quantile(variable, probs = seq(0, 1, length.out = 100), na.rm = TRUE)
theoretical_quantiles <- qnorm(seq(0, 1, length.out = 100))
data.frame(SampleQuantiles = sample_quantiles, TheoreticalQuantiles = theoretical_quantiles)
}
# ---- calculate_qq_data_inverse ----
calculate_qq_data_inverse <- function(variable) {
# Apply inverse transformation, ensuring no division by zero
variable <- ifelse(variable == 0, NA, 1 / variable)
sample_quantiles <- quantile(variable, probs = seq(0, 1, length.out = 100), na.rm = TRUE)
theoretical_quantiles <- qnorm(seq(0, 1, length.out = 100))
data.frame(SampleQuantiles = sample_quantiles, TheoreticalQuantiles = theoretical_quantiles)
}
# ---- calculate_qq_data_yeo_johnson ----
calculate_qq_data_yeo_johnson <- function(variable) {
# Apply Yeo-Johnson transformation
transformed_data <- bestNormalize(variable, method = "yeojohnson")
sample_quantiles <- quantile(transformed_data$x.t, probs = seq(0, 1, length.out = 100), na.rm = TRUE)
theoretical_quantiles <- qnorm(seq(0, 1, length.out = 100))
data.frame(SampleQuantiles = sample_quantiles, TheoreticalQuantiles = theoretical_quantiles)
}
# Getting a list of all of the numeric variables minus the response variable
numeric_vars <- names(select(life, where(is.numeric), -life.expectancy))
# Adjusted plotting layout and margins for a grid of 4x4 (adjust as needed based on the number of variables)
par(mfrow=c(3, 4), mar=c(2, 2, 2, 1))
# ---- loop_plot_qq ----
for (var_name in numeric_vars) {
# Original data Q-Q plot
tryCatch({
qqnorm(life[[var_name]], main = paste("Standard", var_name))
qqline(life[[var_name]], col = "red")
}, error = function(e) {
plot(1, type="n", xlab="", ylab="", main=paste("Standard", var_name, " (Error)"), xlim=c(0, 1), ylim=c(0, 1))
abline(h=0.5, col="gray") # Draw a flat horizontal line
mtext("Error in data", 3)
})
# Log-transformed data Q-Q plot
tryCatch({
log_transformed_data <- log(life[[var_name]] + 1)
qqnorm(log_transformed_data, main = paste("Log(", var_name, ")"))
qqline(log_transformed_data, col = "blue")
}, error = function(e) {
plot(1, type="n", xlab="", ylab="", main=paste("Log", var_name, " (Error)"), xlim=c(0, 1), ylim=c(0, 1))
abline(h=0.5, col="gray") # Draw a flat horizontal line
mtext("Error in data", 3)
})
# Inverse-transformed data Q-Q plot
tryCatch({
qq_data_inv <- calculate_qq_data_inverse(life[[var_name]])
qqnorm(qq_data_inv$SampleQuantiles, main = paste("Inverse(", var_name, ")"))
qqline(qq_data_inv$SampleQuantiles, col = "green")
}, error = function(e) {
plot(1, type="n", xlab="", ylab="", main=paste("Inverse", var_name, " (Error)"), xlim=c(0, 1), ylim=c(0, 1))
abline(h=0.5, col="gray") # Draw a flat horizontal line
mtext("Error in data", 3)
})
# Yeo-Johnson-transformed data Q-Q plot
tryCatch({
qq_data_yj <- calculate_qq_data_yeo_johnson(life[[var_name]])
qqnorm(qq_data_yj$SampleQuantiles, main = paste("Yeo-Johnson (", var_name, ")"))
qqline(qq_data_yj$SampleQuantiles, col = "orange")
}, error = function(e) {
plot(1, type="n", xlab="", ylab="", main=paste("Yeo-Johnson", var_name, " (Error)"), xlim=c(0, 1), ylim=c(0, 1))
abline(h=0.5, col="gray") # Draw a flat horizontal line
mtext("Error in data", 3)
})
}
p <- life %>%
select(where(is.numeric), -ID) %>%
na.omit() %>%
ggcorr(
label = TRUE,
label_size = 2,
label_round = 2,
hjust = 1,
size = 3,
color = "royalblue",
layout.exp = 5,
low = "darkorange",
mid = "gray95",
high = "darkorange",
name = "Correlation"
)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
setwd("~/OneDrive - Southern Methodist University/DS6372/DS6372_Project_1")
library(knitr)
library(ggthemes)
library(gridExtra)
library(ggplot2)
library(GGally)
library(dplyr)
# library(tidyr)
library(caret)
library(countrycode)
library(car)
library(olsrr)
library(glmnet)
# Chunk 2
# Custom function to clean up any issues with column names
processColumnNames <- function(data_frame) {
# Apply the custom name processing logic to each column name
modifiedNames <- sapply(names(data_frame), function(name) {
name <- tolower(name)  # Lowercase all characters
name <- trimws(name)  # Strip leading and trailing spaces
name <- gsub(" +", " ", name)  # Replace multiple spaces with a single space
name <- gsub(" ", ".", name)  # Replace single space with a period
return(name)  # Return the modified name
})
# Ensure the modified column names are valid R identifiers and unique
uniqueNames <- make.names(modifiedNames, unique = TRUE)
names(data_frame) <- uniqueNames # Update the data frame's column names
return(data_frame)
}
# Import the CSV file without altering the column names
life_data <- read.csv("Data/Life Expectancy Data.csv", check.names = FALSE)
# Clean up any column naming issues
life_data <- processColumnNames(life_data)
head(life_data)
# Chunk 3
missing <- life_data %>% select(life.expectancy) %>% sapply(function(x) sum(is.na(x)))
print(paste("Number of observations missing explanatory variables:", missing))
#Remove all rows that have missing values of our explanatory variable life.expectancy
life <- life_data %>% filter(!is.na(life.expectancy))
# To see the first few rows of the filtered data frame
summary(life)
# Chunk 4
# Check uniqueness of each column
life %>% summarise(across(everything(), ~n_distinct(.)))
summary(life)
# Chunk 5
sapply(life, function(x) sum(is.na(x)))
missing_count <- life %>% select(-life.expectancy) %>% sapply(function(x) sum(is.na(x)))
missing_table <- as.data.frame(missing_count) %>%
filter(missing_count >= 1) %>% arrange(desc(missing_count))
print(missing_table)
# Sort data frame by the number of missing values
# Adding an ID column to dataframe
life$ID <- 1:nrow(life)
# Create a table of number of missing values per observation
MissingCount = rowSums(is.na(life))
missing_values_summary <- data.frame(ID = life$ID, MissingCount = MissingCount)
missing_values_summary <- missing_values_summary[order(-missing_values_summary$MissingCount), ]
head(missing_values_summary)
# Chunk 6: Distribution of Status
# Calculate counts and percentages
summary_df <- life %>%
group_by(status) %>%
summarise(count = n()) %>%
mutate(percentage = round(count / sum(count) * 100, 2),
label = paste0(percentage, "%")) %>%
ungroup()
# Visualize the distribution of Status with percentages
ggplot(life, aes(x = status)) +
geom_bar(fill = "peachpuff", aes(y = ..count..)) + # Use ..count.. to get the count for each bar
geom_text(data = summary_df, aes(x = status, y = count/2, label = label), position = position_dodge(width = 0.9), vjust = -0.5) +
theme_clean() +
labs(title = "Distribution of Status", x = "Status", y = "Number of Observations")
# life$Status_dummy <- ifelse(life$Status == "Developing", 1, 0)
# Chunk 7: Distribution and uniqueness of Countries
## Create a table with number of observations
print(table(life$country))
# Chunk 8: Plot Life vs Years
ggplot(life, aes(x = year, y = life.expectancy)) +
geom_smooth() +
theme_classic() +
labs(title = "Life Expectancy Over Years",
x = "Year",
y = "Life Expectancy")
# Chunk 9: Plot LifeVsYears by Region
# Use the countrycode package to break up the Countries by Region
life$Region <- as.factor(countrycode(life$country, "country.name", "region"))
ggplot(life, aes(x = year, y = life.expectancy, group = Region, color = Region)) +
geom_smooth() +
theme_classic() +
labs(title = "Life Expectancy Over Years by Region",
x = "Year",
y = "Life Expectancy") +
theme(legend.position = "bottom")
# Chunk 10
p <- life %>%
select(where(is.numeric), -ID) %>%
na.omit() %>%
ggcorr(
label = TRUE,
label_size = 2,
label_round = 2,
hjust = 1,
size = 3,
color = "royalblue",
layout.exp = 5,
low = "darkorange",
mid = "gray95",
high = "darkorange",
name = "Correlation"
)
p + ggtitle("Inter-variable Correlation Matrix ") + theme_gdocs()
# Compute the correlation matrix
# correlations <- cor(life_numeric)
# life_expectancy_cor <- correlations["life.expectancy", ]
# print(life_expectancy_cor)
# Chunk 11
### Creating model
### This function is removing the columns Country and Year from the pureData data frame.
life_selected <- life %>% na.omit(life) %>%
select(where(is.numeric), -ID)
LEmodel <- lm(`life.expectancy` ~ ., data = life_selected)
summary(LEmodel)
# ols_plot_diagnostics(lm_model)
#Check the residuals
par(mfrow=c(2,2)) # Set up a 2x2 plot grid
plot(LEmodel, which = 1) # Residuals vs Fitted
plot(LEmodel, which = 2) # Normal Q-Q
plot(LEmodel, which = 4) # Cook's distance
par(mfrow = c(1, 1)) # Set up a 1x1 plot grid
cutoff <- 4/(nrow(life_selected)-length(LEmodel$coefficients)-2)
plot(LEmodel, which=4, cook.levels=cutoff)
abline(h=cutoff, lty=2, col="red")
# Chunk 12
# Chunk 13
#training and test set 80/20 split
set.seed(1234)
trainIndex <- createDataPartition(life_selected$`life.expectancy`, p = .80, list = FALSE)
train <- life_selected[trainIndex, ]
test <- life_selected[-trainIndex, ]
# Chunk 14
model_train <- lm(`life.expectancy` ~ ., data = train)
# Predictions and Evaluation
predictions <- predict(model_train, newdata = test)
rmse_value <- sqrt(mean((predictions - test$`life.expectancy`)^2))
print(paste("Basic Modle RMSE:",rmse_value))
# Chunk 15
# Add a marker to distinguish between train and test
train$dataset_type <- 'train'
test$dataset_type <- 'test'
# Combine the datasets
combined <- rbind(train, test)
# Apply model.matrix on the combined dataset
X_combined <- model.matrix(life.expectancy ~ . - 1 - dataset_type, data = combined)  # Exclude the intercept and dataset_type
# Split the combined matrix back into training and testing sets
train_indices <- which(combined$dataset_type == 'train')
test_indices <- which(combined$dataset_type == 'test')
X_train <- X_combined[train_indices, ]
X_test <- X_combined[test_indices, ]
# Make sure to also create the response vector for training
y_train <- train$life.expectancy
y_test <- test$life.expectancy
set.seed(1234)
# Fit LASSO model using glmnet with alpha = 1 (LASSO)
cv_fit <- cv.glmnet(X_train, y_train, alpha = 1, nfolds = 5)
# Plot the cross-validated mean squared error for different values of lambda
plot(cv_fit)
# Determine the minimal lambda
optimal_lambda <- cv_fit$lambda.min
coef_opt <- coef(cv_fit, s = optimal_lambda)
print(coef_opt)
# Fit model with optimal lambda
lasso_model <- glmnet(X_train, y_train, alpha = 1, lambda = optimal_lambda)
predictions <- predict(lasso_model, newx = X_test, s = optimal_lambda)
# Calculate RMSE on the test set
rmse_test <- sqrt(mean((predictions - y_test) ^ 2))
print(paste("Feature RMSE:", rmse_test))
# Chunk 16
set.seed(1234)
fitControl<-trainControl(method="repeatedcv",number=10,repeats=1)
glmnet.fit<-train(life.expectancy~.,
data=life_selected,
method="glmnet",
trControl=fitControl
)
opt.pen<-glmnet.fit$finalModel$lambdaOpt
coef(glmnet.fit$finalModel,opt.pen)
glmnet.fit
plot(glmnet.fit)
# Chunk 17
prepare_data_for_knn <- function(data) {
# Copy the dataset to avoid modifying the original
data_processed <- data
# Loop over each column
for (col_name in names(data_processed)) {
# Check if the column is not numeric
if (!is.numeric(data_processed[[col_name]])) {
# Attempt to convert to numeric
numeric_column <- as.numeric(data_processed[[col_name]])
# Check if the conversion was successful
if (sum(!is.na(numeric_column)) > 0) {
# Replace the column with the converted values
data_processed[[col_name]] <- numeric_column
} else {
# Remove the column if it cannot be converted
data_processed[[col_name]] <- NULL
}
}
}
return(data_processed)
}
# Using the function to remove all non numeric columns
life_processed <- prepare_data_for_knn(life_selected)
set.seed(1234)
model_knn1 <- train(life.expectancy ~ ., data = life_processed,
trControl = trainControl(method = "cv", number = 5),
method = "knn",
tuneGrid = data.frame(k = 3:50),
metric = "RMSE")
print(model_knn1)
# Chunk 18: qqplot-analysis
source("Misc/QQvsLogQQ.r")
sapply(life, function(x) sum(is.na(x)))
missing_count <- life %>% select(-life.expectancy) %>% sapply(function(x) sum(is.na(x)))
missing_table <- as.data.frame(missing_count) %>%
filter(missing_count >= 1) %>% arrange(desc(missing_count))
print(missing_table)
# Sort data frame by the number of missing values
# Adding an ID column to dataframe
life$ID <- 1:nrow(life)
# Create a table of number of missing values per observation
MissingCount = rowSums(is.na(life))
missing_values_summary <- data.frame(ID = life$ID, MissingCount = MissingCount)
missing_values_summary <- missing_values_summary[order(-missing_values_summary$MissingCount), ]
head(missing_values_summary)
