library(olsrr)
missing_count <- life %>% select(-Life.expectancy) %>% sapply(function(x) sum(is.na(x)))
missing_table <- as.data.frame(missing_count) %>%
filter(missing_count >= 1) %>% arrange(desc(missing_count))
missing_table <- as.data.frame(missing_count) %>%
filter(missing_count >= 1) %>% arrange(desc(missing_count))
missing_table <- as.data.frame(missing_count) %>%
filter(missing_count >= 1) %>% arrange(desc(missing_count))
View(missing_table)
sapply(life, function(x) sum(is.na(x)))
missing_count <- life %>% select(-Life.expectancy) %>% sapply(function(x) sum(is.na(x)))
missing_table <- as.data.frame(missing_count) %>%
filter(missing_count >= 1) %>% arrange(desc(missing_count))
kable(missing_table, caption = "Missing Value Counts (Descending Order)", align = "c")
total_NAs <- sum(is.na(life[, !(names(life) %in% "Life Expectancy")]))
cat("Total number of missing variables:", total_NAs)
# Identify NA values and count them by row
missing_counts <- rowSums(is.na(life))
# Define threshold for filtering (e.g., more than 2 missing items)
threshold <- 2
life[missing_counts > threshold, ]
# Sort data frame by the number of missing values
life$MissingCount = rowSums(is.na(life))
sorted_data <- life[order(life$MissingCount, decreasing = TRUE), ]
print(sorted_data)
life <- read.csv("Data/Life_Expectancy_Data.csv")
summary(life)
head(life)
sapply(life, class)
life <- as.data.frame(lapply(life, function(x) if(is.character(x)) factor(x) else x))
sapply(life, class)
sapply(data, function(x) if(is.factor(x)) levels(x) else NULL)
sapply(life, function(x) if(is.factor(x)) levels(x) else NULL)
table(life$status)
table(life$Status)
life <- read.csv("Data/Life_Expectancy_Data.csv")
summary(life)
sapply(life, class)
table(life$Status)
# Take a peak at the distributions for the two columns that are not numeric, Country and Status
print(table(life$Country))
print(table(life$Status))
library(knitr)
library(kableExtra)
# Assuming 'life$Country' is your data vector
country_distribution <- table(life$Country)
# Convert to data frame for kable()
df <- as.data.frame(country_distribution)
# Use kable() to create a basic table, then customize with kableExtra
kable(df, "html") %>%
kable_styling(bootstrap_options = c("striped", "hover"))
life <- read.csv("Data/Life_Expectancy_Data.csv")
summary(life)
sapply(life, class)
# Take a peak at the distributions for the two columns that are not numeric, Country and Status
print(table(life$Country))
library(ggplot2)
# Assuming 'life' is your data frame and 'status' is the column of interest
ggplot(life, aes(x=Status)) +
geom_bar() +
theme_minimal() +
labs(title="Distribution of Status", x="Status", y="Count") +
scale_fill_brewer(palette="Pastel1")
# Assuming 'life' is your data frame and 'status' is the column of interest
ggplot(life, aes(x=Country)) +
geom_bar() +
theme_minimal() +
labs(title="Distribution of Status", x="Status", y="Count") +
scale_fill_brewer(palette="Pastel1")
# Assuming 'life' is your data frame and 'status' is the column of interest
ggplot(life, aes(x=Status)) +
geom_bar() +
theme_minimal() +
labs(title="Distribution of Status", x="Status", y="Count") +
scale_fill_brewer(palette="Pastel1")
table(life$Country)
sapply(life, class)
summary(life)
unique(life$Country)
library(ggplot2)
# Assuming life$Country contains the country names
obs_per_country <- table(life$Country)
# Create a histogram
ggplot(data.frame(Observations = obs_per_country), aes(x = Observations)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black") +
theme_minimal() +
labs(title = "Histogram of Observations per Country", x = "Number of Observations", y = "Frequency")
# Assuming 'life$Country' contains the country names
obs_per_country <- table(life$Country)
# Convert the table to a data frame for ggplot2
df_obs_per_country <- as.data.frame(obs_per_country)
# Create a bar plot for all countries or a subset
ggplot(df_obs_per_country, aes(x = reorder(Var1, Freq), y = Freq)) +
geom_bar(stat = "identity", fill = "coral") +
theme_minimal() +
labs(title = "Observations per Country", x = "Country", y = "Number of Observations") +
coord_flip() # Useful for readability when there are many countries
# Boxplot of observations per country
ggplot(df_obs_per_country, aes(y = Freq)) +
geom_boxplot(fill = "lightgreen") +
theme_minimal() +
labs(title = "Boxplot of Observations per Country", x = "", y = "Number of Observations")
library(ggplot2)
# Create a histogram
ggplot(df_obs_per_country, aes(x = Freq)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black") +
theme_minimal() +
labs(title = "Histogram of Observations per Country", x = "Number of Observations", y = "Frequency")
# Assuming 'life$Country' contains the country names
obs_per_country <- table(life$Country)
# Convert the table to a data frame
df_obs_per_country <- as.data.frame(obs_per_country, stringsAsFactors = FALSE)
# Rename the columns for clarity
names(df_obs_per_country) <- c("Country", "Observations")
# Filter to include only countries with fewer than 16 observations
countries_less_than_16 <- subset(df_obs_per_country, Observations < 16)
# Display the table
print(countries_less_than_16)
# Assuming 'life$Country' contains the country names
obs_per_country <- table(life$Country)
# Convert the table to a data frame
df_obs_per_country <- as.data.frame(obs_per_country, stringsAsFactors = FALSE)
# Rename the columns for clarity
names(df_obs_per_country) <- c("Country", "Observations")
# Filter to include only countries with fewer than 16 observations
countries_less_than_16 <- subset(df_obs_per_country, Observations < 16)
# Assuming 'life$Country' contains the country names
obs_per_country <- table(life$Country)
# Convert the table to a data frame
df_obs_per_country <- as.data.frame(obs_per_country, stringsAsFactors = FALSE)
# Rename the columns for clarity
names(df_obs_per_country) <- c("Country", "Observations")
# Filter to include only countries with fewer than 16 observations
countries_less_than_16 <- subset(df_obs_per_country, Observations >= 16)
# Determine number of unique Countries
unique(life$Country)
# Assuming 'life$Country' contains the country names
obs_per_country <- table(life$Country)
# Convert the table to a data frame
df_obs_per_country <- as.data.frame(obs_per_country, stringsAsFactors = FALSE)
# Rename the columns for clarity
names(df_obs_per_country) <- c("Country", "Observations")
# Filter to include only countries with fewer than 16 observations
countries_less_than_16 <- subset(df_obs_per_country, Observations < 16)
countries_less_than_16
knitr::opts_chunk$set(echo = TRUE)
# setwd("~/OneDrive - Southern Methodist University/Git_Website/DS6372_Project1")
library(ggthemes)
library(gridExtra)
library(ggplot2)
library(GGally)
library(dplyr)
library(tidyr)
library(knitr)
library(caret)
life[order(life$Country, decreasing = TRUE), ]
obs_per_country
library(dplyr)
# Assuming 'life$Country' is a column in your data frame 'life'
countries_less_than_16 <- life %>%
group_by(Country) %>%
summarise(Observations = n()) %>%
filter(Observations < 16) %>%
arrange(desc(Observations)) # Order by Observations in descending order
# Display the result
print(countries_less_than_16)
countries_less_than_16 <- life %>%
group_by(Country) %>%
summarise(Observations = n()) %>%
filter(Observations < 17) %>%
arrange(desc(Observations)) # Order by Observations in descending order
# Display the result
print(countries_less_than_16)
countries_less_than_16 <- life %>%
group_by(Country) %>%
summarise(Observations = n()) %>%
filter(Observations < 16) %>%
arrange(desc(Observations)) # Order by Observations in descending order
# Display the result
print(countries_less_than_16)
countries_less_than_16 <- life %>%
group_by(Country) %>%
summarise(Observations = n()) %>%
filter(Observations < 16) %>%
arrange(desc(Observations)) # Order by Observations in descending order
print(countries_less_than_16)
library(knitr)
library(kableExtra)
# Assuming 'large_table' is your data frame with 189 rows
num_rows_per_table <- 20
num_tables <- ceiling(nrow(large_table) / num_rows_per_table)
country_obs <- table(life$Country))
country_obs <- table(life$Country)
library(knitr)
library(kableExtra)
# Assuming 'large_table' is your data frame with 189 rows
num_rows_per_table <- 20
num_tables <- ceiling(nrow(large_table) / num_rows_per_table)
library(knitr)
library(kableExtra)
# Assuming 'large_table' is your data frame with 189 rows
num_rows_per_table <- 20
num_tables <- ceiling(nrow(country_obs) / num_rows_per_table)
tables <- lapply(1:num_tables, function(i) {
start_row <- (i - 1) * num_rows_per_table + 1
end_row <- min(i * num_rows_per_table, nrow(country_obs))
subset_table <- country_obs[start_row:end_row, ]
kable(subset_table, "latex", booktabs = T) %>%
kable_styling() %>%
column_spec(1, width = "3cm") # Example of specifying column width
})
library(knitr)
library(kableExtra)
# Assuming 'large_table' is your data frame with 189 rows
num_rows_per_table <- 20
num_tables <- ceiling(nrow(country_obs) / num_rows_per_table)
tables <- lapply(1:num_tables, function(i) {
start_row <- (i - 1) * num_rows_per_table + 1
end_row <- min(i * num_rows_per_table, nrow(country_obs))
subset_table <- country_obs[start_row:end_row, ]
kable(subset_table, "latex", booktabs = T) %>%
kable_styling() %>%
column_spec(1, width = "3cm") # Example of specifying column width
})
country_obs
life <- read.csv("Data/Life_Expectancy_Data.csv")
summary(life)
sapply(life, class)
## Determine number of unique Countries
unique(life$Country)
country_obs <- table(life$Country)
obs_per_country <- table(life$Country)
df_obs_per_country <- as.data.frame(obs_per_country, stringsAsFactors = FALSE)
View(df_obs_per_country)
names(df_obs_per_country) <- c("Country", "Observations")
# Create a histogram
ggplot(df_obs_per_country, aes(x = Freq)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black") +
theme_minimal() +
labs(title = "Histogram of Observations per Country", x = "Number of Observations", y = "Frequency")
# Create a histogram
ggplot(df_obs_per_country, aes(x = Observations)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black") +
theme_minimal() +
labs(title = "Histogram of Observations per Country", x = "Number of Observations", y = "Frequency")
ggplot(life, aes(x=Status)) +
geom_bar() +
theme_minimal() +
labs(title="Distribution of Status", x="Status", y="Count")
# Assuming 'life' is your data frame and 'status' is the column of interest
ggplot(life, aes(x=Status, fill="Blue")) +
geom_bar() +
theme_minimal() +
labs(title="Distribution of Status", x="Status", y="Count")
geom_bar(fill="Blue") +
# Assuming 'life' is your data frame and 'status' is the column of interest
ggplot(life, aes(x=Status)) +
geom_bar(stat = "identity", fill = "red") +
theme_minimal() +
labs(title="Distribution of Status", x="Status", y="Count")
# Assuming 'life' is your data frame and 'status' is the column of interest
ggplot(life, aes(x=Status)) +
geom_bar(stat = "identity", fill = "red") +
theme_minimal() +
labs(title="Distribution of Status", x="Status", y="Count")
# Visualize the distribution of Status
ggplot(life, aes(x=Status)) +
geom_bar(stat = "identity", fill = "red") +
theme_minimal() +
labs(title="Distribution of Status", x="Status", y="Count")
# Visualize the distribution of Status
ggplot(life, aes(x=Status, y=count)) +
geom_bar(stat = "identity", fill = "red") +
theme_minimal() +
labs(title="Distribution of Status", x="Status", y="Count")
# Visualize the distribution of Status
ggplot(life, aes(x=Status)) +
geom_bar(stat = "identity", fill = "red") +
theme_minimal() +
labs(title="Distribution of Status", x="Status", y="Count")
# Visualize the distribution of Status
ggplot(life, aes(x=Status)) +
geom_bar(fill = "red") +
theme_minimal() +
labs(title="Distribution of Status", x="Status", y="Count")
# Visualize the distribution of Status
ggplot(life, aes(x=Status)) +
geom_bar(fill = "blue") +
theme_minimal() +
labs(title="Distribution of Status", x="Status", y="Count")
sapply(life, function(x) sum(is.na(x)))
missing_count <- life %>% select(-Life.expectancy) %>% sapply(function(x) sum(is.na(x)))
missing_table <- as.data.frame(missing_count) %>%
filter(missing_count >= 1) %>% arrange(desc(missing_count))
print(missing_table)
sapply(life, function(x) sum(is.na(x)))
missing_count <- life %>% select(-Life.expectancy) %>% sapply(function(x) sum(is.na(x)))
missing_count
filtered_life %>% life %>% filter(is.na(Life.expectancy))
filtered_life <- life %>% filter(is.na(Life.expectancy))
life_filtered <- life %>%
filter(!is.na(Life.expectancy))
life %>% select(Life.expectancy) %>% sapply(function(x) sum(is.na(x)))
#Explanatory variable is Life.expectancy
missing_life_expectancy <- life %>% select(Life.expectancy) %>% sapply(function(x) sum(is.na(x)))
missing_life_expectancy
#Remove all rows that have missing values of our explanatory variable Life.expectancy
life_filtered <- life %>%
filter(!is.na(Life.expectancy))
#Explanatory variable is Life.expectancy
missing_life_expectancy <- life %>% select(Life.expectancy) %>% sapply(function(x) sum(is.na(x)))
print(missing_life_expectancy)
#Remove all rows that have missing values of our explanatory variable Life.expectancy
life_filtered <- life %>%
filter(!is.na(Life.expectancy))
#Remove all rows that have missing values of our explanatory variable Life.expectancy
life <- life %>%
filter(!is.na(Life.expectancy))
## Determine number of unique Countries
unique(life$Country)
## Create a table with number of observations
obs_per_country <- table(life$Country)
## Convert to dataframe to visualize
df_obs_per_country <- as.data.frame(obs_per_country, stringsAsFactors = FALSE)
names(df_obs_per_country) <- c("Country", "Observations")
## Create a histogram
ggplot(df_obs_per_country, aes(x = Observations)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black") +
theme_minimal() +
labs(title = "Histogram of Observations per Country", x = "Number of Observations", y = "Frequency")
# With initial inspection, it appears that most of the countries have exactly 16 observation, however there are a few that do not.  Below is the list of 10 countries that do not have 16 observations.
countries_less_than_16 <- life %>%
group_by(Country) %>%
summarise(Observations = n()) %>%
filter(Observations < 16) %>%
arrange(desc(Observations)) # Order by Observations in descending order
print(countries_less_than_16)
# Visualize the distribution of Status
ggplot(life, aes(x=Status)) +
geom_bar(fill = "blue") +
theme_minimal() +
labs(title="Distribution of Status", x="Status", y="Count")
## Determine number of unique Countries
unique(life$Country)
## Create a table with number of observations
obs_per_country <- table(life$Country)
obs_per_country
life <- read.csv("Data/Life_Expectancy_Data.csv")
summary(life)
sapply(life, class)
## Determine number of unique Countries
unique(life$Country)
## Create a table with number of observations
obs_per_country <- table(life$Country)
## Convert to dataframe to visualize
df_obs_per_country <- as.data.frame(obs_per_country, stringsAsFactors = FALSE)
names(df_obs_per_country) <- c("Country", "Observations")
## Create a histogram
ggplot(df_obs_per_country, aes(x = Observations)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black") +
theme_minimal() +
labs(title = "Histogram of Observations per Country", x = "Number of Observations", y = "Frequency")
missing_life_expectancy
missing_life_expectancy <- life %>% select(Life.expectancy) %>% sapply(function(x) sum(is.na(x)))
print(missing_life_expectancy)
#Remove all rows that have missing values of our explanatory variable Life.expectancy
life <- life %>%
filter(!is.na(Life.expectancy))
# To see the first few rows of the filtered data frame
head(life_filtered)
## Determine number of unique Countries
unique(life$Country)
## Create a table with number of observations
obs_per_country <- table(life$Country)
## Convert to dataframe to visualize
df_obs_per_country <- as.data.frame(obs_per_country, stringsAsFactors = FALSE)
names(df_obs_per_country) <- c("Country", "Observations")
## Create a histogram
ggplot(df_obs_per_country, aes(x = Observations)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black") +
theme_minimal() +
labs(title = "Histogram of Observations per Country", x = "Number of Observations", y = "Frequency")
# With initial inspection, it appears that most of the countries have exactly 16 observation, however there are a few that do not.  Below is the list of 10 countries that do not have 16 observations.
countries_less_than_16 <- life %>%
group_by(Country) %>%
summarise(Observations = n()) %>%
filter(Observations < 16) %>%
arrange(desc(Observations)) # Order by Observations in descending order
print(countries_less_than_16)
# Visualize the distribution of Status
ggplot(life, aes(x=Status)) +
geom_bar(fill = "blue") +
theme_minimal() +
labs(title="Distribution of Status", x="Status", y="Count")
## Determine number of unique Countries
unique(life$Country)
## Create a table with number of observations
obs_per_country <- table(life$Country)
obs_per_country
unique(df_obs_per_country$freq)
View(df_obs_per_country)
View(df_obs_per_country)
## Convert to dataframe to visualize
df_obs_per_country <- as.data.frame(obs_per_country, stringsAsFactors = FALSE)
View(df_obs_per_country)
View(df_obs_per_country)
unique(df_obs_per_country$Freq)
# filtered_life <- life %>% filter(is.na(Life.expectancy))
```
sapply(life, function(x) sum(is.na(x)))
missing_count <- life %>% select(-Life.expectancy) %>% sapply(function(x) sum(is.na(x)))
missing_table <- as.data.frame(missing_count) %>%
filter(missing_count >= 1) %>% arrange(desc(missing_count))
print(missing_table)
# Sort data frame by the number of missing values
life$MissingCount = rowSums(is.na(life))
sorted_data <- life[order(life$MissingCount, decreasing = TRUE), ]
print(sorted_data)
filtered_life <- life %>% filter(is.na(Life.expectancy))
# Sort data frame by the number of missing values
life$MissingCount = rowSums(is.na(life))
sorted_data <- life[order(life$MissingCount, decreasing = TRUE), ]
print(sorted_data)
View(sorted_data)
View(life)
# Sort data frame by the number of missing values
# Add an ID column to dataframe
life$ID <- 1:nrow(life)
# Create a new table with ID and MissingCount
missing_values_summary <- data.frame(life$ID, life$MissingCount)
View(missing_values_summary)
# Create a new table with ID and MissingCount
missing_values_summary <- data.frame(ID = life$ID, MissingCount = life$MissingCount)
# Sort the summary table by MissingCount in descending order
missing_values_summary <- missing_values_summary[order(-missing_values_summary$MissingCount), ]
# Display the sorted summary table
head(missing_values_summary)
life <- read.csv("Data/Life_Expectancy_Data.csv")
summary(life)
sapply(life, class)
missing_life_expectancy <- life %>% select(Life.expectancy) %>% sapply(function(x) sum(is.na(x)))
print(missing_life_expectancy)
#Remove all rows that have missing values of our explanatory variable Life.expectancy
life <- life %>%
filter(!is.na(Life.expectancy))
# To see the first few rows of the filtered data frame
head(life)
sapply(life, function(x) sum(is.na(x)))
missing_count <- life %>% select(-Life.expectancy) %>% sapply(function(x) sum(is.na(x)))
# Create a new table with ID and MissingCount
missing_values_summary <- data.frame(MissingCount = life$MissingCount)
# Sort the summary table by MissingCount in descending order
missing_values_summary <- missing_values_summary[order(-missing_values_summary$MissingCount), ]
# Sort the summary table by MissingCount in descending order
missing_values_summary <- missing_values_summary[order(-missing_values_summary$MissingCount), ]
# Display the sorted summary table
head(missing_values_summary)
# Sort data frame by the number of missing values
# Adding an ID column to dataframe
life$ID <- 1:nrow(life)
# Calculate the number of missing values per observation
life$MissingCount = rowSums(is.na(life))
# Create a new table with ID and MissingCount
missing_values_summary <- data.frame(MissingCount = life$MissingCount)
# Sort the summary table by MissingCount in descending order
missing_values_summary <- missing_values_summary[order(-missing_values_summary$MissingCount), ]
# Display the sorted summary table
head(missing_values_summary)
# Sort data frame by the number of missing values
# Adding an ID column to dataframe
life$ID <- 1:nrow(life)
# Calculate the number of missing values per observation
life$MissingCount = rowSums(is.na(life))
# Create a new table with ID and MissingCount
missing_values_summary <- data.frame(MissingCount = life$MissingCount)
# Sort the summary table by MissingCount in descending order
missing_values_summary <- missing_values_summary[order(-missing_values_summary$MissingCount), ]
# Display the sorted summary table
head(missing_values_summary)
life <- read.csv("Data/Life_Expectancy_Data.csv")
summary(life)
sapply(life, class)
missing_life_expectancy <- life %>% select(Life.expectancy) %>% sapply(function(x) sum(is.na(x)))
print(missing_life_expectancy)
#Remove all rows that have missing values of our explanatory variable Life.expectancy
life <- life %>%
filter(!is.na(Life.expectancy))
# To see the first few rows of the filtered data frame
head(life)
sapply(life, function(x) sum(is.na(x)))
missing_count <- life %>% select(-Life.expectancy) %>% sapply(function(x) sum(is.na(x)))
missing_table <- as.data.frame(missing_count) %>%
filter(missing_count >= 1) %>% arrange(desc(missing_count))
print(missing_table)
View(missing_table)
View(missing_table)
# Sort data frame by the number of missing values
# Adding an ID column to dataframe
life$ID <- 1:nrow(life)
# Calculate the number of missing values per observation
life$MissingCount = rowSums(is.na(life))
# Create a new table with ID and MissingCount
missing_values_summary <- data.frame(MissingCount = life$MissingCount)
View(missing_values_summary)
View(missing_values_summary)
# Create a new table with ID and MissingCount
missing_values_summary <- data.frame(ID = life$ID, MissingCount = life$MissingCount)
# Sort the summary table by MissingCount in descending order
missing_values_summary <- missing_values_summary[order(-missing_values_summary$MissingCount), ]
# Display the sorted summary table
head(missing_values_summary)
View(missing_values_summary)
